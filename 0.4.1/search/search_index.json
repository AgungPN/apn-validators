{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Getting Started","text":"<p>The Validation Package provides a robust and extensible framework for validating data in Python applications. Designed with flexibility and scalability in mind, it offers a suite of pre-built validators and supports custom validation logic. This package ensures data integrity and simplifies the process of enforcing business rules across various domains.</p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>Modular Design: Each validator is encapsulated in its own class, making it easy to manage and extend the validation logic.</li> <li>Customizable Error Messages: Validators support customizable error messages, allowing for clear and context-specific feedback.</li> <li>Customizable Schema: Users can create their own validation schemas according to their specific needs, providing flexibility to handle unique validation scenarios.</li> <li>Comprehensive Validation Suite: Includes a wide range of validators for common data validation tasks such as length checks, format verification, numerical comparisons, list inclusion, regular expression matching, etc.</li> </ul>"},{"location":"#requirements","title":"Requirements","text":"<p>This validation package requires the following dependencies:</p> <ul> <li>Python: Version 3.5 or later is required to use this package.</li> <li>Additional Libraries:</li> <li><code>datetime</code>: Standard Python library for handling date and time operations.</li> <li><code>re</code>: Standard Python library for handling regular expressions.</li> <li><code>collections</code>: Standard Python library, specifically <code>defaultdict</code> from the <code>collections</code> module.</li> </ul> <p>Ensure you have Python 3.5 or higher installed on your system. You can check your Python version by running:</p> <pre><code>python --version\n</code></pre>"},{"location":"#installation","title":"Installation","text":"<p>Install package with pip</p> <pre><code>  pip install apn-validators\n</code></pre>"},{"location":"customize/","title":"Customize","text":""},{"location":"customize/#custom-error-message","title":"Custom Error Message","text":"<p>We can custom error messages for all validators. Here is an example of how to customize error messages for the <code>Password</code> validator.</p> <pre><code># common ways custom error messages\nNumeric(message=\"Value should be a number\").validate(5.2,'data')\n# example Password\nPassword(messages={\"numbers\": \"one number\"})\n</code></pre> <p>Note</p> <p>Only the password rule has different ways to customize error messages.</p>"},{"location":"customize/#custom-rule","title":"Custom Rule","text":"<ul> <li>We can create custom rules by create a class that has a <code>validate</code> method.</li> <li>in the <code>validate</code> method must has two parameters <code>value</code> and <code>field_name</code>. </li> <li>The <code>value</code> is the data that we want to validate and the <code>field_name</code> is the name of the field that we want to validate.</li> <li>The <code>validate</code> method must return <code>None</code> if the data is valid, otherwise return the error message (<code>string</code>).</li> </ul> <pre><code># create a custom rules\nclass UniqueRule:\n    def __init__(self, table, field):\n        self.table = table\n        self.field = field\n\n    def validate(self, value, field_name):\n        # validate data is unique or not\n        if not unique:\n            return f\"{field_name} is not unique\"\n        return None\n</code></pre> <p>see at example how to use the custom rule.</p>"},{"location":"how-to-use/","title":"How To Use","text":""},{"location":"how-to-use/#install","title":"Install","text":"<pre><code>pip install apn-validators\n</code></pre>"},{"location":"how-to-use/#using-multiple-validators","title":"Using multiple validators","text":"<p>you can use multiple validators to validate multiple fields</p> <p><code>validate</code> function return tuple of values and error</p>"},{"location":"how-to-use/#parameters","title":"Parameters","text":"<ul> <li><code>rules</code> : <code>dict</code> - dictionary of fields and list of validators</li> <li><code>data</code> : <code>dict</code> - dictionary of fields and values</li> <li><code>is_err_to_list</code>: <code>bool</code>, default <code>False</code> - if <code>True</code> the error will be a list of string, otherwise the error will be a dictionary</li> </ul> <pre><code>from apn_validators.rules import Password, Email, NotBlank\n\nvalidated, err =  validate(\n    {\n        \"email\": [NotBlank(), Email()],\n        \"password\": [NotBlank(), Password()],\n    },\n    {\"email\": \"example@example.com\", \"password\": \"123456\"},\n)\n</code></pre>"},{"location":"how-to-use/#using-single-validator","title":"Using single validator","text":"<p>you can use a single validator to validate a single field</p> <pre><code>from apn_validators.rules import Email\n\nerr = Email().validate(\"example@example.com\", \"email\")\nif err:\n    print(err)\n</code></pre>"},{"location":"how-to-use/#example","title":"Example","text":"<pre><code># only import what you need\nfrom apn_validators.rules import Password, Email, Length, NotBlank\nfrom apn_validators import validate\n\n# create a custom rules\nclass UniqueRule:\n    def __init__(self, table, field):\n        self.table = table\n        self.field = field\n\n    def validate(self, value, field_name):\n        # validate data is unique or not\n        if not unique:\n            return f\"{field_name} is not unique\"\n        return None\n\n\n# optional to create a function to validate data\ndef sign_up_request(data):\n    # example of how to validate data (multiple fields)\n    return validate(\n        {\n            \"email\": [NotBlank(), Email()],\n            \"password\": [NotBlank(), Password()],\n            \"username\": [NotBlank(), Length(min=5, max=20), UniqueRule('users','id')],\n        },\n        data,\n    )\n\n# get the values and error (return tuple)\nvalidated, err = sign_up_request(\n    {\"email\": \"example@gmail.com\", \"password\": \"123456\", \"username\": \"example\"}\n)\n\n# err is trusty if there is an error\nif err:\n    print(err)\n</code></pre>"},{"location":"rules-available/","title":"Rules Available","text":""},{"location":"rules-available/#strings","title":"Strings","text":"<ul> <li>Length</li> <li>MinLength</li> <li>MaxLength</li> <li>NotBlank</li> <li>InList</li> <li>NotInList</li> <li>DoesntStarsWith</li> <li>StarsWith</li> <li>DoesntEndsWith</li> <li>EndsWith</li> <li>Equals</li> <li>NotEquals</li> </ul>"},{"location":"rules-available/#patterns","title":"Patterns","text":"<ul> <li>Password</li> <li>Email</li> <li>MatchRegex</li> <li>NotMatchRegex</li> </ul>"},{"location":"rules-available/#numbers","title":"Numbers","text":"<ul> <li>Numberic</li> <li>GreaterThanOrEqual as <code>Gte</code></li> <li>GreaterThan as <code>Gt</code></li> <li>LessThanOrEqual as <code>Lte</code></li> <li>LessThan as <code>Lt</code></li> <li>NumberRange </li> <li>DecimalRange </li> <li>DigitsBetween </li> </ul>"},{"location":"rules-available/#dates","title":"Dates","text":"<ul> <li>IsDate</li> <li>DateEquals</li> <li>DateAfter</li> <li>DateBefore</li> </ul>"},{"location":"rules-available/#files","title":"Files","text":"<ul> <li>AllowedExtensions</li> </ul>"},{"location":"rules/docs-dates/","title":"Date Rules","text":""},{"location":"rules/docs-dates/#isdate","title":"IsDate","text":"<p>must be a valid date</p>"},{"location":"rules/docs-dates/#parameters","title":"Parameters:","text":"<ul> <li>date_format (str, optional): The date format to be used for validation. If not provided, the default format is <code>%Y-%m-%d</code>.</li> <li>message (str, optional): The error message to be used if the validation fails.</li> </ul> Example <pre><code># single validate, using default date format\nIsDate().validate(\"2020-01-01\", \"data\")\nIsDate(date_format=\"%Y-%m-%d\")\n</code></pre>"},{"location":"rules/docs-dates/#dateequals","title":"DateEquals","text":"<p>Validate that the provided date value is equal to the target date.</p>"},{"location":"rules/docs-dates/#parameters_1","title":"Parameters:","text":"<ul> <li>target_date: (datetime.date) the date to compare against</li> <li>date_format: (str,optional) the date format to validate the date against (default: %Y-%m-%d)</li> <li>message: (str,optional) the error message to return if the validation fails</li> </ul> Example <pre><code># single validate, using default date format\nDateEquals(datetime.datetime.strptime(\"2024-12-24\", \"%Y-%m-%d\")).validate(\"2024-12-24\", \"data\")\n</code></pre>"},{"location":"rules/docs-dates/#dateafter","title":"DateAfter","text":"<p>Validate that the provided date value is after the target date.</p>"},{"location":"rules/docs-dates/#parameters_2","title":"Parameters:","text":"<ul> <li>target_date: (datetime.date) the date to compare against</li> <li>date_format: (str,optional) the date format to validate the date against (default: %Y-%m-%d)</li> <li>message: (str,optional) the error message to return if the validation</li> </ul> Example <pre><code>DateAfter(datetime.datetime.strptime(\"2024-12-24\", \"%Y-%m-%d\")).validate(\"2024-12-25\", \"data\")\n</code></pre>"},{"location":"rules/docs-dates/#datebefore","title":"DateBefore","text":"<p>Validate that the provided date value is before the target date.</p>"},{"location":"rules/docs-dates/#parameters_3","title":"Parameters:","text":"<ul> <li>target_date: (datetime.date) the date to compare against</li> <li>date_format: (str,optional) the date format to validate the date against (default: %Y-%m-%d)</li> <li>message: (str,optional) the error message to return if the validation</li> </ul> Example <pre><code>DateBefore(datetime.datetime.strptime(\"2024-12-24\", \"%Y-%m-%d\")).validate(\"2024-12-22\", \"data\")\n</code></pre>"},{"location":"rules/docs-files/","title":"File Rules","text":""},{"location":"rules/docs-files/#allowedextensions","title":"AllowedExtensions","text":"<p>Validate that a file has a valid extension.</p>"},{"location":"rules/docs-files/#parameters","title":"Parameters:","text":"<ul> <li>allowed_extensions (list, optional): A set of allowed file extensions in lowercase (default: {\"png\", \"jpg\", \"jpeg\"}).</li> <li>message (str, optional): The error message to be used if the validation fails.</li> </ul> Example <pre><code># single validate\nAllowedExtensions().validate(\"file.png\", \"data\")\n# using custom allowed extensions\nAllowedExtensions(allowed_extensions=[\"pdf\", \"doc\"]).validate(\"file.pdf\", \"data\")\n</code></pre>"},{"location":"rules/docs-numbers/","title":"Number Rules","text":""},{"location":"rules/docs-numbers/#numberic","title":"Numberic","text":"<p>check if the value is a number or not, it can be integer, float, or string can be convert to integer or float.</p>"},{"location":"rules/docs-numbers/#parameters","title":"Parameters:","text":"<ul> <li>message (str, optional): The error message to be used if the validation fails.</li> </ul> Example <pre><code># single validate\nNumeric().validate(5,'data')\n# using custom error message\nNumeric(message=\"Value should be a number\").validate(5.2,'data')\n</code></pre>"},{"location":"rules/docs-numbers/#greaterthenorequal","title":"GreaterThenOrEqual","text":"<p>Validator to check if a value is greater than or equal a specified threshold.</p> <p><code>GreaterThenOrEqual</code> has an alias <code>Gte</code>.</p>"},{"location":"rules/docs-numbers/#parameters_1","title":"Parameters:","text":"<ul> <li>threshold (float): The threshold value that the input value must exceed.</li> <li>message (str,optional): The error message to be used if the validation fails.</li> </ul> Example <pre><code># single validate\nGreaterThenOrEqual(5).validate(5,'data')\nGte(5) # alias, same as GreaterThenOrEqual(5)\n# using custom error message\nGreaterThenOrEqual(5, message=\"Value {field_name} should be greater than or equal to {threshold}\")\n</code></pre>"},{"location":"rules/docs-numbers/#greaterthen","title":"GreaterThen","text":"<p>Validator to check if a value is greater than a specified threshold. <code>GreaterThen</code> has an alias <code>Gt</code>.</p>"},{"location":"rules/docs-numbers/#parameters_2","title":"Parameters:","text":"<ul> <li>threshold (float): The threshold value that the input value must exceed.</li> <li>message (str,optional): The error message to be used if the validation fails.</li> </ul> Example <pre><code># single validate\nGreaterThen(5).validate(6,'data')\nGt(5) # alias, same as GreaterThen(5)\n# using custom error message\nGreaterThen(5, message=\"Value {field_name} should be greater than {threshold}\")\n</code></pre>"},{"location":"rules/docs-numbers/#lessthenorequal","title":"LessThenOrEqual","text":"<p>Validator to check if a value is less than or equal a specified threshold.</p> <p><code>LessThenOrEqual</code> has an alias <code>Lte</code>.</p>"},{"location":"rules/docs-numbers/#parameters_3","title":"Parameters:","text":"<ul> <li>threshold (float): The threshold value that the input value must exceed.</li> <li>message (str,optional): The error message to be used if the validation fails.</li> </ul> Example <pre><code># single validate\nLessThenOrEqual(5).validate(5,'data')\nLte(5) # alias, same as LessThenOrEqual(5)\n# using custom error message\nLessThenOrEqual(5, message=\"Value {field_name} should be less than or equal to {threshold}\")\n</code></pre>"},{"location":"rules/docs-numbers/#lessthen","title":"LessThen","text":"<p>Validator to check if a value is less than a specified threshold.</p> <p><code>LessThen</code> has an alias <code>Lt</code>.</p>"},{"location":"rules/docs-numbers/#parameters_4","title":"Parameters:","text":"<ul> <li>threshold (float): The threshold value that the input value must exceed.</li> <li>message (str, optional): The error message to be used if the validation fails.</li> </ul> Example <pre><code># single validate\nLessThen(5).validate(4,'data')\nLt(5) # alias, same as LessThen(5)\n# using custom error message\nLessThen(5, message=\"Value {field_name} should be less than {threshold}\")\n</code></pre>"},{"location":"rules/docs-numbers/#numberrange","title":"NumberRange","text":"<p>Validate to check if a value is has number between min and max</p>"},{"location":"rules/docs-numbers/#parameters_5","title":"Parameters:","text":"<ul> <li>min (int|float): The minimum number allowed.</li> <li>max (int|float): The maximum number allowed.</li> <li>message (str, optional): The error message to be used if the validation fails.</li> </ul> Example <pre><code># single validate\nNumberRange(5, 10).validate(6,'data')\n# using custom error message\nNumberRange(5, 10, message=\"Value {field_name} should be between {min} and {max}\")\n</code></pre>"},{"location":"rules/docs-numbers/#decimalrange","title":"DecimalRange","text":"<p>Validate to check if a value is has decimal between min and max</p>"},{"location":"rules/docs-numbers/#parameters_6","title":"Parameters:","text":"<ul> <li>min (int): The minimum number of decimal places allowed.</li> <li>max (int): The maximum number of decimal places allowed.</li> <li>message (str): The error message to be used if the validation fails.</li> </ul> Example <pre><code># single validate\n# 5.2 has 1 decimal\nDecimalRange(1, 2).validate(5.2,'data')\n</code></pre>"},{"location":"rules/docs-numbers/#digitsbetween","title":"DigitsBetween","text":"<p>Validator to check if a value has a length between a specified minimum and maximum.</p> <p>Check by: if length &lt; min or length &gt; max will return error</p>"},{"location":"rules/docs-numbers/#parameters_7","title":"Parameters:","text":"<ul> <li>min (int): The minimum length that the value must have.</li> <li>max (int): The maximum length that the value must have.</li> <li>decimal_include (bool): Include decimal or not when calculate length (default: True).</li> <li>dot_include (bool): Include dot or not when calculate length (default: False).</li> <li>message (str): The error message to be used if the validation fails.</li> </ul> Example <pre><code># single validate\n# 123456.34 has 8 digits, cause dot is not include\nDigitsBetween(5, 10,dot_include=False).validate(123456.34,'data')\n# set min=5, max=10, exclude decimal, include dot to count as length\nDigitsBetween(min=5, max=10, decimal_include=False, dot_include=True)\n</code></pre>"},{"location":"rules/docs-patterns/","title":"Pattern Rules","text":""},{"location":"rules/docs-patterns/#password","title":"Password","text":"<p>Validate that a string is a valid password based on various criteria.</p>"},{"location":"rules/docs-patterns/#parameters","title":"Parameters:","text":"<ul> <li>uppercase (bool, optional): Whether the password must contain uppercase letters (default: True).</li> <li>lowercase (bool, optional): Whether the password must contain lowercase letters (default: True).</li> <li>numbers (bool, optional): Whether the password must contain numeric digits (default: True).</li> <li>symbols (bool, optional): Whether the password must contain symbols (default: True).</li> <li>length (int, optional): The minimum length of the password (default: 8).</li> <li>messages (dict[str,str],optional): custom error message</li> </ul> <p>message has this default value</p> <pre><code>{\n    \"base_message\": \"{field_name} field must include at least {messages}\",\n    \"uppercase\": \"one uppercase letter\",\n    \"lowercase\": \"one lowercase letter\",\n    \"numbers\": \"one digit\",\n    \"symbols\": \"one symbol\",\n    \"length\": \"be at least {length} characters\",\n}\n</code></pre> Example <p>this is simple example of how to use Password validator</p> <pre><code># using default config\nPassword()\n# using default but make it 10 characters long and require symbols\nPassword(symbols=False, length=10)\n# using custom error messages\n# only chstomize numbers error message. But we can customize all messages\nPassword(messages={\"numbers\": \"one number\"})\n</code></pre>"},{"location":"rules/docs-patterns/#email","title":"Email","text":"<p>Validate that a string value is a valid email address.</p>"},{"location":"rules/docs-patterns/#parameters_1","title":"Parameters:","text":"<ul> <li>message (str,optional): The error message to be used if the validation fails.</li> </ul> Example <pre><code>Email()\n</code></pre>"},{"location":"rules/docs-patterns/#matchregex","title":"MatchRegex","text":"<p>Validator to check if a value matches a specified regular expression pattern.</p>"},{"location":"rules/docs-patterns/#parameters_2","title":"Parameters:","text":"<ul> <li>pattern (str): The regular expression pattern to check against. (required)</li> <li>message (str,optional): The error message to be used if the validation fails.</li> </ul> Example <pre><code># using default config\nMatchRegex(pattern=r\"\\d+\")\n# using custom error message\nMatchRegex(pattern=r\"\\d+\", message=\"Value should contain digits\")\n</code></pre>"},{"location":"rules/docs-patterns/#notmatchregex","title":"NotMatchRegex","text":"<p>Validator to check if a value does not match a specified regular expression pattern.</p>"},{"location":"rules/docs-patterns/#parameters_3","title":"Parameters:","text":"<ul> <li>pattern (str): The regular expression pattern to check against. (required)</li> <li>message (str,optional): The error message to be used if the validation fails.</li> </ul> Example <pre><code># using default config\nNotMatchRegex(pattern=r\"\\d+\")\n# using custom error message\nNotMatchRegex(pattern=r\"\\d+\", message=\"Value should not contain digits\")\n</code></pre>"},{"location":"rules/docs-strings/","title":"String Rules","text":""},{"location":"rules/docs-strings/#length","title":"Length","text":"<p>Validator to check if the length of a string value falls within a specified range.</p>"},{"location":"rules/docs-strings/#parameters","title":"Parameters:","text":"<ul> <li>min_length (int): The minimum allowed length of the string.</li> <li>max_length (int): The maximum allowed length of the string.</li> <li>message (str): The error message to be used if the validation fails.</li> </ul> Example <pre><code>Length(5, 10) # Length(min_length=5, max_length=10)\n</code></pre>"},{"location":"rules/docs-strings/#minlength","title":"MinLength","text":"<p>Validator to check if a value has a minimum length.</p>"},{"location":"rules/docs-strings/#parameters_1","title":"Parameters:","text":"<ul> <li>min (int): The minimum length that the value must have.</li> <li>message (str): The error message to be used if the validation fails.</li> </ul> Example <pre><code>MinLength(5) # MinLength(min=5)\n</code></pre>"},{"location":"rules/docs-strings/#maxlength","title":"MaxLength","text":"<p>Validator to check if a value has a maximum length.</p>"},{"location":"rules/docs-strings/#parameters_2","title":"Parameters:","text":"<ul> <li>max (int): The maximum length that the value must have.</li> <li>message (str): The error message to be used if the validation fails.</li> </ul> Example <pre><code>MaxLength(10) # MaxLength(max=10)\n</code></pre>"},{"location":"rules/docs-strings/#notblank","title":"NotBlank","text":"<p>Validator to check if a string value is not blank (empty or contains only whitespace).</p>"},{"location":"rules/docs-strings/#parameters_3","title":"Parameters:","text":"<ul> <li>message (str): The error message to be used if the validation fails.</li> </ul> Example <pre><code>NotBlank()\n# custom error message\nNotBlank(message=\"Value should not be blank\")\n</code></pre>"},{"location":"rules/docs-strings/#inlist","title":"InList","text":"<p>Validator to check if a string value is present in a specified list.</p>"},{"location":"rules/docs-strings/#parameters_4","title":"Parameters:","text":"<ul> <li>valid_values (list): The list of valid values.</li> <li>message (str): The error message to be used if the validation fails.</li> </ul> Example <pre><code>InList([\"apple\", \"banana\", \"cherry\"])\n# custom error message\nInList([\"apple\", \"banana\", \"cherry\"], \"Value {field_name} should be one of: {valid_values}\")\n</code></pre>"},{"location":"rules/docs-strings/#notinlist","title":"NotInList","text":"<p>Validator to check if a string value is not present in a specified list.</p>"},{"location":"rules/docs-strings/#parameters_5","title":"Parameters:","text":"<ul> <li>invalid_values (list): The list of invalid values.</li> <li>message (str): The error message to be used if the validation fails.</li> </ul> Example <pre><code>NotInList([\"apple\", \"banana\", \"cherry\"])\n# custom error message\nNotInList([\"apple\", \"banana\", \"cherry\"], \"Value {field_name} should not be one of: {valid_values}\")\n</code></pre>"},{"location":"rules/docs-strings/#doesntstartswith","title":"DoesntStartsWith","text":"<p>Validate that a string value does not start with any of the specified prefixes.</p>"},{"location":"rules/docs-strings/#parameters_6","title":"Parameters:","text":"<ul> <li>list_prefix (list of str): The list of prefixes that the string should not start with.</li> <li>message (str): The error message template if validation fails.</li> </ul> Example <pre><code>DoesntStartsWith([\"apple\", \"banana\", \"cherry\"])\n# custom error message\nDoesntStartsWith([\"apple\", \"banana\", \"cherry\"], \"Value {field_name} should not start with any of: {list_prefix}\")\n</code></pre>"},{"location":"rules/docs-strings/#startswith","title":"StartsWith","text":"<p>Validate that a string value does not start with any of the specified prefixes.</p>"},{"location":"rules/docs-strings/#parameters_7","title":"Parameters:","text":"<ul> <li>list_prefix (list of str): The list of prefixes that the string should not start with.</li> <li>message (str): The error message template if validation fails.</li> </ul> Example <pre><code>StartsWith([\"apple\", \"banana\", \"cherry\"])\n# custom error message\nStartsWith([\"apple\", \"banana\", \"cherry\"], \"Value {field_name} should start with any of: {list_prefix}\")\n</code></pre>"},{"location":"rules/docs-strings/#doesntendswith","title":"DoesntEndsWith","text":"<p>Validate that a string value does not start with any of the specified prefixes.</p>"},{"location":"rules/docs-strings/#parameters_8","title":"Parameters:","text":"<ul> <li>list_prefix (list of str): The list of prefixes that the string should not start with.</li> <li>message (str): The error message template if validation fails.</li> </ul> Example <pre><code>DoesntEndsWith([\"apple\", \"banana\", \"cherry\"])\n# custom error message\nDoesntEndsWith([\"apple\", \"banana\", \"cherry\"], \"Value {field_name} should not end with any of: {list_prefix}\")\n</code></pre>"},{"location":"rules/docs-strings/#endswith","title":"EndsWith","text":"<p>Validate that a string value ends with one of the specified suffixes.</p>"},{"location":"rules/docs-strings/#parameters_9","title":"Parameters:","text":"<ul> <li>list_tail (list of str): The list of suffixes that the string should end with.</li> <li>message (str): The error message template if validation fails.</li> </ul> Example <pre><code>EndsWith([\"apple\", \"banana\", \"cherry\"])\n# custom error message\nEndsWith([\"apple\", \"banana\", \"cherry\"], \"Value {field_name} should end with any of: {list_tail}\")\n</code></pre>"},{"location":"rules/docs-strings/#equals","title":"Equals","text":"<p>Validate that a string value is equal to another specified value.</p>"},{"location":"rules/docs-strings/#parameters_10","title":"Parameters:","text":"<ul> <li>another_value (str): The value to compare against.</li> <li>message (str): The error message template if validation fails.</li> </ul> Example <pre><code>Equals(\"apple\")\n# custom error message\nEquals(\"apple\", \"Value {field_name} should be equal to {another_value}\")\n</code></pre>"},{"location":"rules/docs-strings/#notequals","title":"NotEquals","text":"<p>Validate that a string value is not equal to another specified value.</p>"},{"location":"rules/docs-strings/#parameters_11","title":"Parameters:","text":"<ul> <li>another_value: The value to compare against.</li> <li>message (str): The error message template if validation fails.</li> </ul> Example <pre><code>NotEquals(\"apple\")\n# custom error message\nNotEquals(\"apple\", \"Value {field_name} should not be equal to {another_value}\")\n</code></pre>"}]}